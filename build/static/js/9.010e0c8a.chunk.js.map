{"version":3,"sources":["Copmponents/Banner/Banner.js","Containers/Main/Main.js"],"names":["Banner","useState","mainColor","setMainColor","movieInfo","setMovieInfo","allGenrs","setAllGenrs","useEffect","mount","fetch","base","api_key","then","data","json","genres","Math","ceil","random","length","catch","error","alert","id","results","backdrop_path","className","style","backgroundImage","imageUrl","getColors","color","arrBuff","ArrayBuffer","DataView","setUint32","parseInt","slice","arrByte","Uint8Array","src","backgroundColor","Main","Movies","startUrl","endUrl"],"mappings":"8MAmEeA,MA9Df,WAAmB,IAAD,EACoBC,mBAAS,IAD7B,mBACPC,EADO,KACIC,EADJ,OAEoBF,mBAAS,MAF7B,mBAEPG,EAFO,KAEIC,EAFJ,OAGkBJ,mBAAS,MAH3B,mBAGPK,EAHO,KAGGC,EAHH,KAkDd,OA7CAC,qBAAU,WACN,IAAIC,GAAQ,EAaZ,OAZAC,MAAM,GAAD,OAAIC,IAAJ,qCAAqCC,IAArC,oBACJC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACCL,GACCF,EAAYO,EAAKE,OAAOC,KAAKC,KAAKD,KAAKE,SAAWL,EAAKE,OAAOI,OAAS,QAG9EC,OAAM,SAAAC,GACAb,GACCc,MAAMD,MAGP,WAAQb,GAAQ,KACxB,IAEHD,qBAAU,WACN,IAAIC,GAAQ,EAgBZ,OAfGH,GACCI,MAAM,GAAD,OAAIC,IAAJ,mCAAmCC,IAAnC,8GAAgJN,EAASkB,GAAzJ,4CACJX,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACCL,GACCJ,EAAaS,EAAKW,QAAQR,KAAKC,KAAKD,KAAKE,SAAWL,EAAKW,QAAQL,OAAS,QAGjFC,OAAM,SAAAC,GACAb,GACCc,MAAMD,MAKX,WAAQb,GAAQ,KACxB,CAACH,IAUGF,GAAyC,OAA5BA,EAAUsB,cAC1B,sBAAKC,UAAU,SAASC,MAAO,CAAEC,gBAAgB,OAAD,OAASC,IAAW,YAAc1B,EAAUsB,cAA5C,MAAhD,UACK,cAAC,IAAD,CAAgBK,UAVP,SAAAC,GACd,IAAIC,EAAU,IAAIC,YAAY,GACrB,IAAIC,SAASF,GACnBG,UAAU,EAAEC,SAASL,EAAM,GAAGM,MAAM,GAAI,KAAI,GAC/C,IAAIC,EAAU,IAAIC,WAAWP,GAC7B,OAAO9B,EAAaoC,EAAQ,GAAK,IAAMA,EAAQ,GAAK,IAAMA,EAAQ,KAKvBE,IAAKX,IAAW,YAAc1B,EAAUsB,gBAC/E,qBAAKC,UAAU,UAAUC,MAAO,CAAEc,gBAAgB,QAAD,OAAUxC,EAAV,SAA4B2B,gBAAgB,gCAAD,OAAkC3B,EAAlC,0BAA6DA,EAA7D,0BAAwFA,EAAxF,mBAC5F,sBAAKyB,UAAU,UAAf,UACI,uDAAyB,uBAAzB,sBACA,uDAGR,M,SChDOgB,UAVf,WAEI,OACI,sBAAKhB,UAAU,OAAOH,GAAG,OAAzB,UACI,cAAC,EAAD,IACA,cAACoB,EAAA,EAAD,CAAQC,SAAQ,UAAKlC,IAAL,mCAAoCC,IAApC,yFAAoIkC,OAAM","file":"static/js/9.010e0c8a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Banner.css';\r\nimport { api_key, base, imageUrl } from '../../staticInfo';\r\nimport { ColorExtractor } from 'react-color-extractor';\r\n\r\nfunction Banner() {\r\n    const [mainColor, setMainColor] = useState('');\r\n    const [movieInfo, setMovieInfo] = useState(null);\r\n    const [allGenrs, setAllGenrs] = useState(null);\r\n\r\n    useEffect(() => {\r\n        let mount = true;\r\n        fetch(`${base}/genre/movie/list?api_key=${api_key}&language=en-US`)\r\n        .then(data => data.json())\r\n        .then(data => {\r\n            if(mount) {\r\n                setAllGenrs(data.genres[Math.ceil(Math.random() * data.genres.length - 1)]);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            if(mount) {\r\n                alert(error);\r\n            }\r\n        })\r\n        return () => { mount = false }\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        let mount = true;\r\n        if(allGenrs) {\r\n            fetch(`${base}/discover/movie?api_key=${api_key}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=${allGenrs.id}&with_watch_monetization_types=flatrate`)\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                if(mount) {\r\n                    setMovieInfo(data.results[Math.ceil(Math.random() * data.results.length - 1)]);\r\n                }   \r\n            })\r\n            .catch(error => {\r\n                if(mount) {\r\n                    alert(error);\r\n                }\r\n            })\r\n\r\n        }\r\n        return () => { mount = false }\r\n    }, [allGenrs]);\r\n\r\n    const getColors = color => {\r\n        var arrBuff = new ArrayBuffer(4);\r\n        var vw = new DataView(arrBuff);\r\n        vw.setUint32(0,parseInt(color[0].slice(1), 16),false);\r\n        var arrByte = new Uint8Array(arrBuff);  \r\n        return setMainColor(arrByte[1] + \",\" + arrByte[2] + \",\" + arrByte[3]);\r\n    };\r\n    \r\n    return movieInfo && movieInfo.backdrop_path !== null ? (\r\n        <div className='banner' style={{ backgroundImage: `url(${imageUrl + '/original' + movieInfo.backdrop_path})` }}>\r\n            {<ColorExtractor getColors={getColors} src={imageUrl + '/original' + movieInfo.backdrop_path} />}\r\n            <div className=\"overlay\" style={{ backgroundColor: `rgba(${mainColor}, .4)`, backgroundImage: `linear-gradient(to top, rgba(${mainColor}, 0.8) 0, rgba(${mainColor}, 0) 60%, rgba(${mainColor}, 0.8) 100%)` }} />\r\n            <div className=\"content\">\r\n                <h1>Unlimited movies, TV <br />shows, and more.</h1>\r\n                <h4>Watch anywhere.</h4>\r\n            </div>\r\n        </div>\r\n    ) : null;\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport './Main.css';\r\nimport Banner from '../../Copmponents/Banner/Banner';\r\nimport Movies from '../../Copmponents/Movies/Movies';\r\nimport { api_key, base } from '../../staticInfo';\r\n\r\nfunction Main() {\r\n    \r\n    return (\r\n        <div className='main' id='main'>\r\n            <Banner />\r\n            <Movies startUrl={`${base}/discover/movie?api_key=${api_key}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=`} endUrl={`&with_watch_monetization_types=flatrate`} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n"],"sourceRoot":""}