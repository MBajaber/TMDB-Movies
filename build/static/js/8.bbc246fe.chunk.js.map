{"version":3,"sources":["Copmponents/Movies/Movie/Movie.js","Containers/Favorites/Favorites.js"],"names":["Movie","imageUrl","rating","paragraph","title","date","clickHandler","id","useState","color","setColor","length","titleSize","className","style","borderColor","backgroundColor","onClick","getColors","arrBuff","ArrayBuffer","DataView","setUint32","parseInt","slice","arrByte","Uint8Array","src","to","encodeURI","toLocaleLowerCase","alt","loading","backgroundImage","value","text","strokeWidth","styles","path","stroke","transformOrigin","fontSize","margin","Favories","favoriteList","useSelector","state","movies","userInfo","user","dispatch","useDispatch","getMovieId","process","map","el","movieData","backdrop_path","overview","vote_average","release_date"],"mappings":"oKAoDeA,IA7Cf,YAAgF,IAA/DC,EAA8D,EAA9DA,SAAUC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,aAAcC,EAAM,EAANA,GAAM,EACjDC,mBAAS,IADwC,mBACpEC,EADoE,KAC7DC,EAD6D,OAEvDF,mBAASJ,EAAMO,QAAU,IAAtCC,EAFoE,oBAY3E,OACI,sBAAKC,UAAU,QAAOC,MAAO,CAACC,YAAY,OAAD,OAASN,EAAT,KAAmBO,gBAAgB,OAAD,OAASP,EAAT,MAAoBL,MAAOD,EAAWc,QAAS,kBAAMX,EAAaC,IAA7I,UACI,cAAC,IAAD,CAAgBW,UAXN,SAAAT,GACd,IAAIU,EAAU,IAAIC,YAAY,GACrB,IAAIC,SAASF,GACnBG,UAAU,EAAEC,SAASd,EAAM,GAAGe,MAAM,GAAI,KAAI,GAC/C,IAAIC,EAAU,IAAIC,WAAWP,GAC7B,OAAOT,EAASe,EAAQ,GAAK,IAAMA,EAAQ,GAAK,IAAMA,EAAQ,KAMpBE,IAAK1B,IAC3C,eAAC,IAAD,CAAM2B,GAAE,iBAAYC,UAAUzB,GAAO0B,qBAAuB1B,MAAOA,EAAnE,UACI,sBAAKS,UAAU,QAAf,UACI,qBAAKc,IAAK1B,EAAU8B,IAAK3B,EAAO4B,QAAQ,SACxC,qBAAKnB,UAAU,gBAAgBC,MAAO,CAACmB,gBAAgB,wCAAD,OAA0CxB,EAA1C,4BAAmEA,EAAnE,4BAA4FA,EAA5F,gBAE1D,qBAAKI,UAAU,eAAf,SACI,cAAC,IAAD,CACIqB,MAAOhC,EAAkB,GAATA,EAAc,GAC9BiC,KAAMjC,GAAkB,EACxBkC,YAAa,EACbC,OAAQ,CACJC,KAAM,CACFC,OAAO,GAAD,OACFrC,GAAU,EAAI,UAAYA,EAAS,GAAKA,EAAS,EAAI,UAAY,WAErEsC,gBAAiB,sBAKjC,sBAAK3B,UAAU,qBAAf,2BAAkD,+BAAOR,OACzD,sBAAKQ,UAAU,OAAf,UACI,oBAAIA,UAAU,cAAcC,MAAOV,EAAMO,OAAS,GAAK,CAAC8B,SAAU,OAAQC,OAAQ,OAAS9B,EAAY,CAAC6B,SAAU,OAAQC,OAAQ,OAAS,CAACD,SAAU,QAAtJ,SAAgKrC,IAChK,mBAAGS,UAAU,kBAAb,SA5BUV,EAAUQ,QAAU,IAApB,UAA6BR,EAAUqB,MAAM,EAAG,KAAhD,OAA4DrB,e,6ECjB1F,+DAoCewC,UA7Bf,WAAqB,IACTC,EAAiBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,UAA5CH,aACAI,EAAaH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,QAAxCD,SACFE,EAAWC,cACX7C,EAAe,SAACC,GAAD,OAAQ2C,EAASE,YAAW7C,KACjD,OACI,qBAAKM,UAAU,WAAf,SAEqB,OAAbmC,GAA6C,IAAxBJ,EAAajC,OAC9B,qCAEqB,OAAbqC,EACE,oBAAInC,UAAU,iBAAd,qDACA,oBAAIA,UAAU,iBAAd,sBAEN,qBAAKA,UAAU,oBAAoBC,MAAO,CAACmB,gBAAgB,OAAD,OAASoB,GAAT,uCAK9D,qBAAKxC,UAAU,oBAAf,SACK+B,EAAaU,KAAI,SAAAC,GAAE,OAAI,cAAC,IAAD,CAA6BtD,SAAQ,UAAKA,IAAL,iBAAsBsD,EAAGC,UAAUC,eAAiBlD,GAAIgD,EAAGC,UAAUjD,GAAIH,MAAOmD,EAAGC,UAAUpD,MAAOD,UAAWoD,EAAGC,UAAUE,SAAUxD,OAAQqD,EAAGC,UAAUG,aAActD,KAAMkD,EAAGC,UAAUI,aAActD,aAAcA,GAAjPiD,EAAGC,UAAUjD","file":"static/js/8.bbc246fe.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Movie.css';\r\nimport { ColorExtractor } from 'react-color-extractor';\r\nimport { CircularProgressbar} from \"react-circular-progressbar\";\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Movie({ imageUrl, rating, paragraph, title, date, clickHandler, id }) {\r\n    const [color, setColor] = useState('');\r\n    const [titleSize] = useState(title.length >= 27 ? true: false);\r\n    const getColors = color => {\r\n        var arrBuff = new ArrayBuffer(4);\r\n        var vw = new DataView(arrBuff);\r\n        vw.setUint32(0,parseInt(color[0].slice(1), 16),false);\r\n        var arrByte = new Uint8Array(arrBuff);  \r\n        return setColor(arrByte[1] + \",\" + arrByte[2] + \",\" + arrByte[3]);\r\n    };\r\n    const cutSentence = () => paragraph.length >= 160 ? `${paragraph.slice(0, 160)}...` : paragraph;\r\n\r\n    return (\r\n        <div className='movie'style={{borderColor: `rgb(${color})`, backgroundColor: `rgb(${color})`}} title={paragraph} onClick={() => clickHandler(id)}>\r\n            <ColorExtractor getColors={getColors} src={imageUrl} />\r\n            <Link to={`/movie/${encodeURI(title).toLocaleLowerCase()}`} title={title}>\r\n                <div className=\"image\">\r\n                    <img src={imageUrl} alt={title} loading='lazy' />\r\n                    <div className=\"overlay_movie\" style={{backgroundImage: `linear-gradient(transparent 0%, rgba(${color}, 0.5) 25%, rgba(${color}, 0.75) 60%, rgb(${color}) 90%)`}} />\r\n                </div>\r\n                <div className=\"movie_rating\">\r\n                    <CircularProgressbar\r\n                        value={rating ? rating * 10 : 6 * 10}\r\n                        text={rating ? rating : 6}\r\n                        strokeWidth={6}\r\n                        styles={{\r\n                            path: {\r\n                                stroke: `${\r\n                                    rating >= 7 ? '#3e98c7' : rating < 7 && rating > 4 ? '#D2D531' : '#DB4264'\r\n                                }`,\r\n                                transformOrigin: 'center center',\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"movie_release_data\">release date: <span>{date}</span></div>\r\n                <div className=\"info\">\r\n                    <h3 className=\"movie_title\" style={title.length > 60 ? {fontSize: '15px', margin: '0px'} : titleSize ? {fontSize: '16px', margin: '0px'} : {fontSize: '18px'}}>{title}</h3>\r\n                    <p className=\"movie_paragraph\">{cutSentence()}</p>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movie\r\n","import React from 'react';\r\nimport './Favorites.css';\r\nimport Movie from '../../Copmponents/Movies/Movie/Movie';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getMovieId } from '../../store/movieSlice';\r\nimport { imageUrl } from '../../staticInfo';\r\n\r\nfunction Favories() {\r\n    const { favoriteList } = useSelector(state => state.movies);\r\n    const { userInfo } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const clickHandler = (id) => dispatch(getMovieId(id));\r\n    return (\r\n        <div className='favories'>\r\n            {\r\n                userInfo === null || favoriteList.length === 0 ? (\r\n                    <>\r\n                        {\r\n                            userInfo === null \r\n                            ? <h2 className='favories_title'>You have to Login to see  Favorite List</h2> \r\n                            : <h2 className='favories_title'>No Items</h2>\r\n                        }\r\n                        <div className='no_items_favorite' style={{backgroundImage: `url(${process.env.PUBLIC_URL}images/Favorite/Favorite.png)`}}>\r\n                            \r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <div className=\"favories_all_boxs\">\r\n                        {favoriteList.map(el => <Movie key={el.movieData.id} imageUrl={`${imageUrl}/w300/${el.movieData.backdrop_path}`} id={el.movieData.id} title={el.movieData.title} paragraph={el.movieData.overview} rating={el.movieData.vote_average} date={el.movieData.release_date} clickHandler={clickHandler} />)}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Favories\r\n"],"sourceRoot":""}